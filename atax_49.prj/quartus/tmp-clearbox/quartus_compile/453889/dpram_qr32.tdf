--altdpram ACF_BLOCK_RAM_AND_MLAB_EQUIVALENT_PAUSED_READ_CAPABILITIES="CARE" CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" CBX_SINGLE_OUTPUT_FILE="OFF" DEVICE_FAMILY="Stratix 10" INDATA_ACLR="OFF" INDATA_REG="INCLOCK" INTENDED_DEVICE_FAMILY="Stratix 10" OUTDATA_ACLR="OFF" OUTDATA_REG="UNREGISTERED" OUTDATA_SCLR="OFF" RAM_BLOCK_TYPE="MLAB" RDADDRESS_ACLR="OFF" RDADDRESS_REG="UNREGISTERED" RDCONTROL_ACLR="OFF" RDCONTROL_REG="UNREGISTERED" READ_DURING_WRITE_MODE_MIXED_PORTS="DONT_CARE" WIDTH=4 WIDTH_BYTEENA=1 WIDTHAD=3 WRADDRESS_ACLR="OFF" WRADDRESS_REG="INCLOCK" WRCONTROL_ACLR="OFF" WRCONTROL_REG="INCLOCK" data inclock outclock q rdaddress wraddress wren CARRY_CHAIN="MANUAL" CYCLONEII_M4K_COMPATIBILITY="ON" LOW_POWER_MODE="AUTO"
--VERSION_BEGIN 21.1 cbx_altdpram 2021:03:18:19:49:02:SC cbx_altera_syncram 2021:03:18:19:49:02:SC cbx_altera_syncram_nd_impl 2021:03:18:19:49:02:SC cbx_altsyncram 2021:03:18:19:49:02:SC cbx_lpm_add_sub 2021:03:18:19:49:02:SC cbx_lpm_compare 2021:03:18:19:49:02:SC cbx_lpm_decode 2021:03:18:19:49:02:SC cbx_lpm_mux 2021:03:18:19:49:02:SC cbx_mgl 2021:03:18:19:49:02:SC cbx_nadder 2021:03:18:19:49:02:SC cbx_stratix 2021:03:18:19:49:02:SC cbx_stratixii 2021:03:18:19:49:02:SC cbx_stratixiii 2021:03:18:19:49:02:SC cbx_stratixv 2021:03:18:19:49:02:SC cbx_util_mgl 2021:03:18:19:49:02:SC  VERSION_END


-- Copyright (C) 2021  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.


FUNCTION fourteennm_mlab_cell (clk0, clk1, clr, ena0, ena1, ena2, portaaddr[address_width-1..0], portabyteenamasks[byte_enable_mask_width-1..0], portadatain[data_width-1..0], portbaddr[address_width-1..0])
WITH ( address_width = 1, byte_enable_mask_width = 2, data_width = 1, first_address, first_bit_number, init_file, last_address, logical_ram_depth, logical_ram_name, logical_ram_width, mem_init0, mixed_port_feed_through_mode, port_b_data_out_clear, port_b_data_out_clock)
RETURNS ( portbdataout[data_width-1..0]);

--synthesis_resources = MLAB 1 reg 4 
OPTIONS ALTERA_INTERNAL_OPTION = "{-to portadatain_reg} PRESERVE_REGISTER_SYN_ONLY=ON;{-to portadatain_reg} ALLOW_SYNCH_CTRL_USAGE=OFF;{-to portadatain_reg} DONT_MERGE_REGISTER=ON";

SUBDESIGN dpram_qr32
( 
	data[3..0]	:	input;
	inclock	:	input;
	outclock	:	input;
	q[3..0]	:	output;
	rdaddress[2..0]	:	input;
	wraddress[2..0]	:	input;
	wren	:	input;
) 
VARIABLE 
	lutrama0 : fourteennm_mlab_cell
		WITH (
			address_width = 3,
			data_width = 1,
			first_address = 0,
			first_bit_number = 0,
			last_address = 7,
			logical_ram_depth = 8,
			logical_ram_name = "ALTDPRAM_INSTANCE",
			logical_ram_width = 4,
			mixed_port_feed_through_mode = "dont care"
		);
	lutrama1 : fourteennm_mlab_cell
		WITH (
			address_width = 3,
			data_width = 1,
			first_address = 0,
			first_bit_number = 1,
			last_address = 7,
			logical_ram_depth = 8,
			logical_ram_name = "ALTDPRAM_INSTANCE",
			logical_ram_width = 4,
			mixed_port_feed_through_mode = "dont care"
		);
	lutrama2 : fourteennm_mlab_cell
		WITH (
			address_width = 3,
			data_width = 1,
			first_address = 0,
			first_bit_number = 2,
			last_address = 7,
			logical_ram_depth = 8,
			logical_ram_name = "ALTDPRAM_INSTANCE",
			logical_ram_width = 4,
			mixed_port_feed_through_mode = "dont care"
		);
	lutrama3 : fourteennm_mlab_cell
		WITH (
			address_width = 3,
			data_width = 1,
			first_address = 0,
			first_bit_number = 3,
			last_address = 7,
			logical_ram_depth = 8,
			logical_ram_name = "ALTDPRAM_INSTANCE",
			logical_ram_width = 4,
			mixed_port_feed_through_mode = "dont care"
		);
	portadatain_reg[3..0] : dffe;
	datain_wire[3..0]	: WIRE;
	dataout_wire[3..0]	: WIRE;
	portadatain_wire[3..0]	: WIRE;
	rdaddr_wire[2..0]	: WIRE;
	wr_en	: WIRE;
	wraddr_wire[2..0]	: WIRE;

BEGIN 
	lutrama[3..0].clk0 = inclock;
	lutrama[3..0].ena0 = wr_en;
	lutrama[3..0].portaaddr[2..0] = wraddr_wire[2..0];
	lutrama[0].portadatain[0..0] = portadatain_wire[0..0];
	lutrama[1].portadatain[0..0] = portadatain_wire[1..1];
	lutrama[2].portadatain[0..0] = portadatain_wire[2..2];
	lutrama[3].portadatain[0..0] = portadatain_wire[3..3];
	lutrama[3..0].portbaddr[2..0] = rdaddr_wire[2..0];
	portadatain_reg[].clk = inclock;
	portadatain_reg[].d = ( datain_wire[3..0]);
	datain_wire[] = data[];
	dataout_wire[] = lutrama[3..0].portbdataout[];
	portadatain_wire[] = portadatain_reg[].q;
	q[] = dataout_wire[];
	rdaddr_wire[] = rdaddress[];
	wr_en = wren;
	wraddr_wire[] = wraddress[];
END;
--VALID FILE
